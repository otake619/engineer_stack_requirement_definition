Why：システム開発の目的（要望）
→エンジニア(未経験含む)が自身の学習ログとして活用でき、また転職の際に
そのログを採用担当者へと公開することでポートフォリオに並ぶ自身の
熱意や到達度を示す証拠として活用するためのアプリを作成したい。
機能はできるだけシンプルにして使いやすくする。
ログをCSVに形式のファイルに出力出来るようにする。

現状の課題
ゴール（本来あるべき状態）
→本アプリのゴールとは逸れるが、本アプリを運用することでの私自身の
目標は
・1円でもいいから広告を張って収益化する
・広告にはGoogle Adsenseを使用する
・Google Adsenseは、訪問者が広告を1回クリックすることで
20-30円ほどの収益が得られるらしい
(参考　https://www.onamae.com/column/affiliate/10/ )
・自身とは無関係の客を1人でもいいから獲得する

何故この目標設定であるか？
→顧客を獲得し、その上で1円でも収益化出来てしまえば、私自身のエンジニア転職
の際に自身のそれまで積み上げてきたものに対する強力な証明となるため。

本アプリ作成前の私自身の課題(困りごと)
→アプリ開発の勉強をするうえで、躓いたポイントがあったとしても記録を
つけていないので忘れてしまう。忘れてしまうため、再び同じポイントで
躓くことになる。
また、昨今のエンジニア転職の際にはポートフォリオを提出するのが
当然の流れになっているがポートフォリオだけよりかは自身がどんなポイントで
躓いているかやどれくらい今まで学習してきたのか可視化できたほうが企業に
対してのアピールにつながり、またつまづきレベルを採用担当が知ることで
ミスマッチをなくすことにも繋がると思われる。

現状とゴールのギャップ（解決すべき課題）
→ログをエクセルで貯めているが、正直みづらい。
WEBエンジニア転職に特化したメモアプリはおそらく存在しない。

What：どのように課題を解決するのか
→シンプルなUIで学習ログを貯められてログを閲覧しやすいアプリを作成する。
本アプリに採用担当用の管理画面を作成することで、自身のログを共有すること
を可能とする。ログを共有することで、使用者の熱意や到達度をチェックできる。

機能要件
<---------------------決定案(データベース設計)------------------------->
・つまづきポイントをデータベースに保存する機能
・思考プロセスをデータベースに保存する機能
・解決策をデータベースに保存する機能
・参考サイトをデータベースに保存する機能
・自由コメントをデータベースに保存する機能

→記録する項目が多すぎると記録する気が失せてしまうので
シンプルに2つ(タイトルとメモの本文)だけにする。
→テキストファイルは保留で、画像のアップロード機能は実装する。
・アップロードを許可する画像の拡張子、ファイルサイズを決定する。
・ブックマーク設定機能 - 星マークのボタンを押すとブックマークを
設定でき、以降検索フォームにて「ブックマーク済み」を検索条件に
セットすると検索結果に登録日順にて表示されるようにする機能
・カテゴリー設定機能 - カテゴリーを設定した方が検索効率が上がるため
・カテゴリーは1つのログに対して最大5件まで登録できる

→カテゴリーが5件である妥当性を考える！
・memoレコードにread_count?カラムを設けて、何回参照したかで
ヒット条件上位に持ってくる機能を追加。
<------------------------------END-------------------------------------->

<-----------------------決定案------------------------------->
・ログ参照画面にてログを登録日順に降順昇順に並び替える機能
・検索結果の対象文字列を太字で表示 - 「php」で検索した場合、
検索結果のphpが太字になって表示される機能
・メモの検索ワードの周辺何十文字を参照して検索結果に
表示する機能。何文字にするかは、別途妥当性を調べつつ決定する。
・検索をかけたらすぐに全文を表示するのではなくて、
サーチワードの周辺の文字列のみリンクとして表示して、
リンクをクリックすることでログが全文表示されるようにする
・フリーワードでのログ検索機能
<-------------------------END---------------------------->
・カテゴリーでのログ検索機能 ← ×(廃案)

<---------------------------決定案(その他)---------------------------------->
・データベースへの保存が成功したらポップアップ表示する機能
・認証系(アカウント作成・ログイン・ログアウト・アカウント削除など)
・ログの閲覧機能
・ログの更新機能
・ログの削除機能
・問い合わせできるフォームを実装
・問い合わせフォームにて改善案を受け付ける旨を記載する

非機能要件
・速いレスポンスを実現するやり方を調べて、その方法でシステムを組む
・ユーザーからの改善案があったら、適宜精査してシステムに取り込んでいく

・TODO
→各種コーディング規約を記載する
PHP(Laravel)命名規則
・テーブル名 スネークケース(uses_item_table)
・モデル名 アッパーキャメル(UserData)
・migration ファイル名 スネークケース(users_item_table)
・seeds ファイル名 アッパーキャメル(UsersTableSeeder)
・Controllers ファイル名 アッパーキャメル(UserController)
・views ファイル名 スネークケース(users_add)
・クラス名 アッパーキャメル(UserData)
・メソッド名 ローワーキャメル(UserData)
・変数名 スネークケース($user_data)

JavaScript命名規則
・ファイル名はすべて小文字(filename.js)
・定数は大文字スネークケース(CONSTANT_NAME)
・関数、変数、メソッド、名前空間はキャメルケース(somethingName)
・コンストラクタはパスカルケース(ClassName)
・privateプロパティ(_privateMethod)
・オプション引数(必須ではないパラメータ)にはopt_プレフィックスを付ける(opt_param)
・可変長引数はvar_arg固定、かつ関数内ではargumentsを参照(var_arg)

HTML命名規則
(https://qiita.com/manabuyasuda/items/dbb76ed36970bec95470) 参考

<----------------------------END--------------------------------->
----------------------------------------------------------------
※以下、IPAによる非機能要件の例

①可用性	システムの継続利用	・障害や災害時における稼働目標
②性能・拡張性	システム性能、将来の拡張	・画面レスポンス
・データ増加
③運用・保守性	運用と保守のサービス	・稼働時間
・データバックアップ
・システム監視
・計画停止
・サポート体制
④移行性	現行システムからの移行	・移行スケジュール
・移行方法
・移行データ
⑤セキュリティ	セキュリティの確保	・認証機能（ログインなど）
・機能制限
・データの暗号化
⑥環境・エコロジー	設置環境や規格	耐震や温度、湿度、騒音など
----------------------------------------------------------------

セキュリティなど
・SQLインジェクションやXSS対策、クロスサイトリクエストフォージェリ対策など。
・データベースを保護するシステムの実現を入念に調べる - ここが1番
大切だと考えていて、脆弱性を孕んだシステムを組んでデータを流出させたら
大問題なので調べ尽くしたレベルまで理解して現役エンジニアからも意見をもらいつつ
堅牢なシステム構成とする

How：具体的な使い勝手と実装方法（システム設計に近いタスク）
画面設計（UI設計）
→別ファイルの"画面遷移図.drawio"を参照

データ設計
→別ファイルの"テーブル定義書.drawio"を参照

クラス図、シーケンス図
→別ファイルの"テーブル定義書.drawio"を参照

各部位を実装する技術
・バックエンドはphpでコーディング。phpのフレームワークである
Laravelを使用する。
・フロントはJavascriptでコーディング。
・cssはcssフレームワークであるBulmaで実装。
・(将来的には)フロント部分はTypeScriptで実装 - バージョンアップ
の際にTypeScriptへ置き換える。



2021-09-14 斎藤からの指摘
問題点
・categoryテーブルを作成しないとカテゴリーの変更ができなくなる。
・拡張子の変なスペースを削除
・記録ページのレイアウトを変更
・トップページ中央よせログイン画面と新規登録画面
・ログイン情報、アクティブかどうか
・論理削除にする
・imagesテーブルを持つ
・画像軽量化の方法を調べる
・bookmarksテーブルを持つ

